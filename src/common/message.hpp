#ifndef _MESSAGE_H_
#define _MESSAGE_H_

#include <iostream>
#include <cstdlib>

/** Message ids */
const int MSG_DONE = 0;
const int MSG_ACK = 1;
const int MSG_MOVING_AVG = 2;
const int MSG_OPTION_PRICE = 3;
const int MSG_RESULT = 100;
const int MSG_CONTROL = 200;
const int MSG_TERM = 300;
#pragma pack(1)
typedef struct msg {
  int msgId; // based on msg id we know what the data means
  int clientId;  //generated by executor - used for priority scheduling
  int priority;
  int predicted_time;
  char rids;
  size_t expDataSizeBytes; // data size of the expected reply
  size_t dataSize;
  size_t paramsSize;

  size_t totalBytes;
  size_t dataBytes;
  char data[];

  int firstParam();
  void print();

} msg_t;
#pragma pack(0)

/** Utility functions for constructing various types of messages */
msg_t* msg_empty();
msg_t* msg_ack();
msg_t* msg_done();

msg_t* msg_moving_avg(int n, size_t width, int* dataIn);
msg_t* msg_option_pricing(double strike,
			  double sigma,
			  double timestep,
			  int numMaturity,
			  int paraNode,
			  int numPathGroup,
			  double T);

#endif /* _MESSAGE_H_ */
