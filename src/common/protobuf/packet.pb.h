// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class ControlMSG;

// ===================================================================

class ControlMSG : public ::google::protobuf::Message {
 public:
  ControlMSG();
  virtual ~ControlMSG();

  ControlMSG(const ControlMSG& from);

  inline ControlMSG& operator=(const ControlMSG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlMSG& default_instance();

  void Swap(ControlMSG* other);

  // implements Message ----------------------------------------------

  ControlMSG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlMSG& from);
  void MergeFrom(const ControlMSG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // optional string arg1 = 2;
  inline bool has_arg1() const;
  inline void clear_arg1();
  static const int kArg1FieldNumber = 2;
  inline const ::std::string& arg1() const;
  inline void set_arg1(const ::std::string& value);
  inline void set_arg1(const char* value);
  inline void set_arg1(const char* value, size_t size);
  inline ::std::string* mutable_arg1();
  inline ::std::string* release_arg1();
  inline void set_allocated_arg1(::std::string* arg1);

  // optional string arg2 = 3;
  inline bool has_arg2() const;
  inline void clear_arg2();
  static const int kArg2FieldNumber = 3;
  inline const ::std::string& arg2() const;
  inline void set_arg2(const ::std::string& value);
  inline void set_arg2(const char* value);
  inline void set_arg2(const char* value, size_t size);
  inline ::std::string* mutable_arg2();
  inline ::std::string* release_arg2();
  inline void set_allocated_arg2(::std::string* arg2);

  // optional string arg3 = 4;
  inline bool has_arg3() const;
  inline void clear_arg3();
  static const int kArg3FieldNumber = 4;
  inline const ::std::string& arg3() const;
  inline void set_arg3(const ::std::string& value);
  inline void set_arg3(const char* value);
  inline void set_arg3(const char* value, size_t size);
  inline ::std::string* mutable_arg3();
  inline ::std::string* release_arg3();
  inline void set_allocated_arg3(::std::string* arg3);

  // @@protoc_insertion_point(class_scope:ControlMSG)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_arg1();
  inline void clear_has_arg1();
  inline void set_has_arg2();
  inline void clear_has_arg2();
  inline void set_has_arg3();
  inline void clear_has_arg3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* command_;
  ::std::string* arg1_;
  ::std::string* arg2_;
  ::std::string* arg3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static ControlMSG* default_instance_;
};
// ===================================================================


// ===================================================================

// ControlMSG

// required string command = 1;
inline bool ControlMSG::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlMSG::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlMSG::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlMSG::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& ControlMSG::command() const {
  return *command_;
}
inline void ControlMSG::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void ControlMSG::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void ControlMSG::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControlMSG::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* ControlMSG::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ControlMSG::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string arg1 = 2;
inline bool ControlMSG::has_arg1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlMSG::set_has_arg1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlMSG::clear_has_arg1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlMSG::clear_arg1() {
  if (arg1_ != &::google::protobuf::internal::kEmptyString) {
    arg1_->clear();
  }
  clear_has_arg1();
}
inline const ::std::string& ControlMSG::arg1() const {
  return *arg1_;
}
inline void ControlMSG::set_arg1(const ::std::string& value) {
  set_has_arg1();
  if (arg1_ == &::google::protobuf::internal::kEmptyString) {
    arg1_ = new ::std::string;
  }
  arg1_->assign(value);
}
inline void ControlMSG::set_arg1(const char* value) {
  set_has_arg1();
  if (arg1_ == &::google::protobuf::internal::kEmptyString) {
    arg1_ = new ::std::string;
  }
  arg1_->assign(value);
}
inline void ControlMSG::set_arg1(const char* value, size_t size) {
  set_has_arg1();
  if (arg1_ == &::google::protobuf::internal::kEmptyString) {
    arg1_ = new ::std::string;
  }
  arg1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControlMSG::mutable_arg1() {
  set_has_arg1();
  if (arg1_ == &::google::protobuf::internal::kEmptyString) {
    arg1_ = new ::std::string;
  }
  return arg1_;
}
inline ::std::string* ControlMSG::release_arg1() {
  clear_has_arg1();
  if (arg1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arg1_;
    arg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ControlMSG::set_allocated_arg1(::std::string* arg1) {
  if (arg1_ != &::google::protobuf::internal::kEmptyString) {
    delete arg1_;
  }
  if (arg1) {
    set_has_arg1();
    arg1_ = arg1;
  } else {
    clear_has_arg1();
    arg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string arg2 = 3;
inline bool ControlMSG::has_arg2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlMSG::set_has_arg2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlMSG::clear_has_arg2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlMSG::clear_arg2() {
  if (arg2_ != &::google::protobuf::internal::kEmptyString) {
    arg2_->clear();
  }
  clear_has_arg2();
}
inline const ::std::string& ControlMSG::arg2() const {
  return *arg2_;
}
inline void ControlMSG::set_arg2(const ::std::string& value) {
  set_has_arg2();
  if (arg2_ == &::google::protobuf::internal::kEmptyString) {
    arg2_ = new ::std::string;
  }
  arg2_->assign(value);
}
inline void ControlMSG::set_arg2(const char* value) {
  set_has_arg2();
  if (arg2_ == &::google::protobuf::internal::kEmptyString) {
    arg2_ = new ::std::string;
  }
  arg2_->assign(value);
}
inline void ControlMSG::set_arg2(const char* value, size_t size) {
  set_has_arg2();
  if (arg2_ == &::google::protobuf::internal::kEmptyString) {
    arg2_ = new ::std::string;
  }
  arg2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControlMSG::mutable_arg2() {
  set_has_arg2();
  if (arg2_ == &::google::protobuf::internal::kEmptyString) {
    arg2_ = new ::std::string;
  }
  return arg2_;
}
inline ::std::string* ControlMSG::release_arg2() {
  clear_has_arg2();
  if (arg2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arg2_;
    arg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ControlMSG::set_allocated_arg2(::std::string* arg2) {
  if (arg2_ != &::google::protobuf::internal::kEmptyString) {
    delete arg2_;
  }
  if (arg2) {
    set_has_arg2();
    arg2_ = arg2;
  } else {
    clear_has_arg2();
    arg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string arg3 = 4;
inline bool ControlMSG::has_arg3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControlMSG::set_has_arg3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ControlMSG::clear_has_arg3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ControlMSG::clear_arg3() {
  if (arg3_ != &::google::protobuf::internal::kEmptyString) {
    arg3_->clear();
  }
  clear_has_arg3();
}
inline const ::std::string& ControlMSG::arg3() const {
  return *arg3_;
}
inline void ControlMSG::set_arg3(const ::std::string& value) {
  set_has_arg3();
  if (arg3_ == &::google::protobuf::internal::kEmptyString) {
    arg3_ = new ::std::string;
  }
  arg3_->assign(value);
}
inline void ControlMSG::set_arg3(const char* value) {
  set_has_arg3();
  if (arg3_ == &::google::protobuf::internal::kEmptyString) {
    arg3_ = new ::std::string;
  }
  arg3_->assign(value);
}
inline void ControlMSG::set_arg3(const char* value, size_t size) {
  set_has_arg3();
  if (arg3_ == &::google::protobuf::internal::kEmptyString) {
    arg3_ = new ::std::string;
  }
  arg3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ControlMSG::mutable_arg3() {
  set_has_arg3();
  if (arg3_ == &::google::protobuf::internal::kEmptyString) {
    arg3_ = new ::std::string;
  }
  return arg3_;
}
inline ::std::string* ControlMSG::release_arg3() {
  clear_has_arg3();
  if (arg3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arg3_;
    arg3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ControlMSG::set_allocated_arg3(::std::string* arg3) {
  if (arg3_ != &::google::protobuf::internal::kEmptyString) {
    delete arg3_;
  }
  if (arg3) {
    set_has_arg3();
    arg3_ = arg3;
  } else {
    clear_has_arg3();
    arg3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
